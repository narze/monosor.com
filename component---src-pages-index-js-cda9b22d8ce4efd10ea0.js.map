{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/pages/index.js","webpack:///./src/components/seo.js"],"names":["Layout","children","className","IndexPage","allPosts","data","allMdx","edges","keywords","title","to","map","node","key","id","slug","frontmatter","query","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","name","content","property","author","concat","length","join","titleTemplate","defaultProps"],"mappings":"2FACA,iDAuBeA,IAlBf,YAA+B,IAAbC,EAAY,EAAZA,SAChB,OACE,yBAAKC,UAAU,wCACb,kBAAC,IAAD,MAEA,0BAAMA,UAAU,kEACbD,GAGH,kBAAC,IAAD,S,kCCfN,0GA2CeE,UArCG,SAAC,GAAc,IACzBC,EADwB,EAAXC,KACGC,OAAOC,MAE7B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,SAAU,CAAC,iBAAD,eACVC,MAAM,MAGR,6BAASP,UAAU,eACjB,wBAAIA,UAAU,SAAd,WAEA,yDAA8B,kBAAC,OAAD,CAAMQ,GAAG,kBAAT,qBAGhC,6BAASR,UAAU,oBACjB,wBAAIA,UAAU,QAAd,SAGEE,EAASO,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACX,yBAAKC,IAAKD,EAAKE,GAAIZ,UAAU,QAC3B,kBAAC,OAAD,CAAMQ,GAAIE,EAAKG,MACZH,EAAKI,YAAYP,cAgB3B,IAAMQ,EAAK,c,kCC7ClB,iDAKA,SAASC,EAAT,GAA4D,IAA7CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMb,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MACxCa,EAASC,yBAAe,cAAxBD,KAYFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdN,QAEFC,KAAM,CACJ,CACEM,KAAK,cACLC,QAASJ,GAEX,CACEK,SAAS,WACTD,QAASnB,GAEX,CACEoB,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKG,aAAaK,QAE7B,CACEH,KAAK,gBACLC,QAASnB,GAEX,CACEkB,KAAK,sBACLC,QAASJ,IAGVO,OACCvB,EAASwB,OAAS,EACd,CACEL,KAAK,WACLC,QAASpB,EAASyB,KAAT,OAEX,IAELF,OAAOV,GACVZ,MAAOA,EACPyB,cAAa,QAAUZ,EAAKG,aAAahB,QAK/CS,EAAIiB,aAAe,CACjBf,KAAK,KACLZ,SAAU,GACVa,KAAM,IAWOH","file":"component---src-pages-index-js-cda9b22d8ce4efd10ea0.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport Header from \"./header\";\nimport Footer from \"./footer\";\n\nfunction Layout({ children }) {\n  return (\n    <div className=\"flex flex-col min-h-screen font-sans\">\n      <Header />\n\n      <main className=\"flex-grow w-full max-w-4xl px-4 py-20 mx-auto md:px-8 md:py-16\">\n        {children}\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { Link, graphql } from \"gatsby\"\n\nconst IndexPage = ({ data }) => {\n  const allPosts = data.allMdx.edges\n\n  return (\n    <Layout>\n      <SEO\n        keywords={[`digital garden`, `blog`, `tech`]}\n        title=\"~\"\n      />\n\n      <section className=\"text-center\">\n        <h1 className=\"title\">monosor</h1>\n\n        <p>Hello there! Welcome to my <Link to=\"digital-garden\">Digital Garden!</Link></p>\n      </section>\n\n      <section className=\"text-center mt-8\">\n        <h3 className=\"mb-2\">Posts</h3>\n\n        {\n          allPosts.map(({ node }) => (\n            <div key={node.id} className=\"my-1\">\n              <Link to={node.slug}>\n                {node.frontmatter.title}\n              </Link>\n            </div>\n          ))\n        }\n      </section>\n    </Layout>\n  );\n}\n\nIndexPage.propTypes = {\n  data: PropTypes.node.isRequired,\n};\n\nexport default IndexPage;\n\nexport const query = graphql`\n  query {\n    allMdx(filter: {frontmatter: {draft: {ne: true}}}) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n          }\n          fileAbsolutePath\n          slug\n        }\n      }\n    }\n  }\n`\n","import { useStaticQuery, graphql } from \"gatsby\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(graphql`\n    query DefaultSEOQuery {\n      site {\n        siteMetadata {\n          title\n          description\n          author\n        }\n      }\n    }\n  `);\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  keywords: [],\n  meta: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}